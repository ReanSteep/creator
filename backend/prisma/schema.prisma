generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model UserKey {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId      String   @map("user_id") @db.Uuid
  publicKey   String   @map("public_key")
  keyVersion  Int      @default(1) @map("key_version")
  createdAt   DateTime @default(now()) @map("created_at") @db.Timestamptz

  @@unique([userId, keyVersion])
  @@map("user_keys")
}

model Folder {
  id             String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name           String?
  encryptedName  Bytes?   @map("encrypted_name")
  ownerId        String   @map("owner_id") @db.Uuid
  position       Int      @default(0)
  createdAt      DateTime @default(now()) @map("created_at") @db.Timestamptz
  updatedAt      DateTime @default(now()) @map("updated_at") @db.Timestamptz
  tabs           Tab[]

  @@map("folders")
}

model Tab {
  id              String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  encryptedName   Bytes        @map("encrypted_name")
  ownerId         String       @map("owner_id") @db.Uuid
  folderId        String?      @map("folder_id") @db.Uuid
  position        Int          @default(0)
  type            String
  pluginId        String?      @map("plugin_id")
  createdAt       DateTime     @default(now()) @map("created_at") @db.Timestamptz
  updatedAt       DateTime     @default(now()) @map("updated_at") @db.Timestamptz
  folder          Folder?      @relation(fields: [folderId], references: [id])
  messages        Message[]
  fileMetadata    FileMetadata[]

  @@map("tabs")
}

model Message {
  id                String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  tabId            String    @map("tab_id") @db.Uuid
  senderId         String?   @map("sender_id") @db.Uuid
  encryptedContent Bytes     @map("encrypted_content")
  encryptedMetadata Bytes?   @map("encrypted_metadata")
  expiresAt        DateTime? @map("expires_at") @db.Timestamptz
  createdAt        DateTime  @default(now()) @map("created_at") @db.Timestamptz
  tab              Tab       @relation(fields: [tabId], references: [id])

  @@map("messages")
}

model FileMetadata {
  id              String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  encryptedName   Bytes    @map("encrypted_name")
  encryptedKey    Bytes    @map("encrypted_key")
  minioPath       String   @map("minio_path")
  sizeBytes       BigInt   @map("size_bytes")
  mimeType        String?  @map("mime_type")
  ownerId         String   @map("owner_id") @db.Uuid
  tabId           String   @map("tab_id") @db.Uuid
  createdAt       DateTime @default(now()) @map("created_at") @db.Timestamptz
  tab             Tab      @relation(fields: [tabId], references: [id])

  @@map("file_metadata")
}

model PluginConfig {
  id           String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name         String
  version      String
  entryPoint   String   @map("entry_point")
  permissions  Json     @default("{}")
  createdAt    DateTime @default(now()) @map("created_at") @db.Timestamptz
  updatedAt    DateTime @default(now()) @map("updated_at") @db.Timestamptz

  @@map("plugin_configs")
}

model UserSettings {
  userId              String    @id @map("user_id") @db.Uuid
  messageRetentionDays Int?     @map("message_retention_days")
  theme               String?   @default("light")
  notificationsEnabled Boolean  @default(true) @map("notifications_enabled")
  encryptedPreferences Bytes?   @map("encrypted_preferences")
  updatedAt           DateTime @default(now()) @map("updated_at") @db.Timestamptz

  @@map("user_settings")
}

model WorkspaceMember {
  workspaceId      String   @map("workspace_id") @db.Uuid
  userId           String   @map("user_id") @db.Uuid
  role             String   @default("member")
  encryptedMetadata Bytes?  @map("encrypted_metadata")
  joinedAt         DateTime @default(now()) @map("joined_at") @db.Timestamptz

  @@id([workspaceId, userId])
  @@map("workspace_members")
} 